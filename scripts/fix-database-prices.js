/**
 * Script para corrigir os pre√ßos incorretos dos servi√ßos no banco de dados
 * Executa a l√≥gica: fullGuests * pricePerGuest + halfGuests * (pricePerGuest / 2)
 */

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Calcula o valor correto de um servi√ßo
 */
function calculateCorrectServiceValue(pricePerGuest, fullGuests, halfGuests) {
  const fullGuestsValue = fullGuests * pricePerGuest;
  const halfGuestsValue = halfGuests * (pricePerGuest / 2);
  return fullGuestsValue + halfGuestsValue;
}

/**
 * Verifica se um pre√ßo est√° correto
 */
function isPriceCorrect(currentPrice, calculatedPrice) {
  return Math.abs(currentPrice - calculatedPrice) <= 0.01;
}

/**
 * Corrige os pre√ßos incorretos no banco de dados
 */
async function fixIncorrectPrices() {
  try {
    console.log('üîç Buscando servi√ßos com pre√ßos incorretos...');
    
    // Buscar todos os event_services com pre√ßos
    const { data: eventServices, error: fetchError } = await supabase
      .from('event_services')
      .select(`
        id,
        price_per_guest_at_booking,
        total_estimated_price,
        event_id,
        events!inner (
          full_guests,
          half_guests,
          free_guests
        )
      `)
      .not('price_per_guest_at_booking', 'is', null)
      .not('total_estimated_price', 'is', null);

    if (fetchError) {
      console.error('‚ùå Erro ao buscar servi√ßos:', fetchError);
      return;
    }

    console.log(`üìä Encontrados ${eventServices.length} servi√ßos para verificar`);

    let correctedCount = 0;
    let totalDifference = 0;

    for (const service of eventServices) {
      const pricePerGuest = Number(service.price_per_guest_at_booking);
      const currentPrice = Number(service.total_estimated_price);
      const fullGuests = Number(service.events.full_guests) || 0;
      const halfGuests = Number(service.events.half_guests) || 0;

      // Calcular pre√ßo correto
      const correctPrice = calculateCorrectServiceValue(pricePerGuest, fullGuests, halfGuests);

      // Verificar se o pre√ßo est√° incorreto
      if (!isPriceCorrect(currentPrice, correctPrice)) {
        const difference = currentPrice - correctPrice;
        totalDifference += difference;

        console.log(`üîß Corrigindo servi√ßo ${service.id}:`);
        console.log(`   Pre√ßo atual: R$ ${currentPrice.toFixed(2)}`);
        console.log(`   Pre√ßo correto: R$ ${correctPrice.toFixed(2)}`);
        console.log(`   Diferen√ßa: R$ ${difference.toFixed(2)}`);

        // Atualizar o pre√ßo no banco
        const { error: updateError } = await supabase
          .from('event_services')
          .update({ 
            total_estimated_price: correctPrice,
            updated_at: new Date().toISOString()
          })
          .eq('id', service.id);

        if (updateError) {
          console.error(`‚ùå Erro ao atualizar servi√ßo ${service.id}:`, updateError);
        } else {
          correctedCount++;
          console.log(`‚úÖ Servi√ßo ${service.id} corrigido`);
        }
      }
    }

    console.log('\nüìà Resumo da corre√ß√£o:');
    console.log(`   Servi√ßos corrigidos: ${correctedCount}`);
    console.log(`   Diferen√ßa total: R$ ${totalDifference.toFixed(2)}`);
    
    if (correctedCount > 0) {
      console.log('‚úÖ Corre√ß√£o conclu√≠da com sucesso!');
    } else {
      console.log('‚úÖ Todos os pre√ßos j√° est√£o corretos!');
    }

  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error);
  }
}

/**
 * Verifica se a corre√ß√£o foi aplicada corretamente
 */
async function verifyCorrection() {
  try {
    console.log('\nüîç Verificando corre√ß√£o...');
    
    const { data: eventServices, error } = await supabase
      .from('event_services')
      .select(`
        id,
        price_per_guest_at_booking,
        total_estimated_price,
        events!inner (
          full_guests,
          half_guests
        )
      `)
      .not('price_per_guest_at_booking', 'is', null)
      .not('total_estimated_price', 'is', null)
      .limit(10);

    if (error) {
      console.error('‚ùå Erro ao verificar:', error);
      return;
    }

    console.log('\nüìä Amostra de servi√ßos ap√≥s corre√ß√£o:');
    eventServices.forEach(service => {
      const pricePerGuest = Number(service.price_per_guest_at_booking);
      const currentPrice = Number(service.total_estimated_price);
      const fullGuests = Number(service.events.full_guests) || 0;
      const halfGuests = Number(service.events.half_guests) || 0;
      const correctPrice = calculateCorrectServiceValue(pricePerGuest, fullGuests, halfGuests);
      const isCorrect = isPriceCorrect(currentPrice, correctPrice);

      console.log(`   Servi√ßo ${service.id}:`);
      console.log(`     Pre√ßo atual: R$ ${currentPrice.toFixed(2)}`);
      console.log(`     Pre√ßo calculado: R$ ${correctPrice.toFixed(2)}`);
      console.log(`     Status: ${isCorrect ? '‚úÖ Correto' : '‚ùå Incorreto'}`);
    });

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  }
}

// Executar o script
async function main() {
  console.log('üöÄ Iniciando corre√ß√£o de pre√ßos...\n');
  
  await fixIncorrectPrices();
  await verifyCorrection();
  
  console.log('\nüéâ Script conclu√≠do!');
}

// Executar apenas se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { fixIncorrectPrices, verifyCorrection }; 