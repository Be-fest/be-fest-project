import { createClient } from '@/lib/supabase/client';

/**
 * Fun√ß√£o utilit√°ria para fazer logout de forma consistente em toda a aplica√ß√£o
 */
export async function performLogout(reason: string = 'logout') {
  try {
    console.log('üîÑ Iniciando processo de logout...');
    
    const supabase = createClient();
    
    // 1. Fazer logout no Supabase
    console.log('üîê Fazendo logout no Supabase...');
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      console.error('‚ùå Erro ao fazer logout no Supabase:', error);
    } else {
      console.log('‚úÖ Logout do Supabase realizado com sucesso');
    }

    // 2. Limpar localStorage de forma mais agressiva
    console.log('üóëÔ∏è Limpando localStorage...');
    if (typeof window !== 'undefined') {
      // Limpar todos os itens relacionados ao Supabase e autentica√ß√£o
      const keysToRemove = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && (
          key.startsWith('sb-') || 
          key.includes('supabase') || 
          key === 'sessionExpired' ||
          key.includes('auth') ||
          key.includes('be-fest')
        )) {
          keysToRemove.push(key);
        }
      }
      
      keysToRemove.forEach(key => {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è Removido do localStorage: ${key}`);
      });
      
      // Limpar sessionStorage tamb√©m
      sessionStorage.clear();
    }

    // 3. Limpar cookies de forma mais abrangente
    console.log('üç™ Limpando cookies...');
    if (typeof document !== 'undefined') {
      // Obter todos os cookies
      const cookies = document.cookie.split(';');
      
      cookies.forEach(cookie => {
        const eqPos = cookie.indexOf('=');
        const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
        
        // Limpar cookies relacionados ao Supabase, autentica√ß√£o e qualquer cookie de sess√£o
        if (name.includes('sb-') || name.includes('auth') || name.includes('supabase') || name.includes('session')) {
          // Limpar para o dom√≠nio atual
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
          // Limpar para subdom√≠nios
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${window.location.hostname}`;
          console.log(`üç™ Cookie removido: ${name}`);
        }
      });
    }

    // 4. Redirecionamento for√ßado com m√∫ltiplos m√©todos
    console.log('üîÑ Redirecionando para login...');
    const redirectUrl = `/auth/login?reason=${encodeURIComponent(reason)}`;
    
    if (typeof window !== 'undefined') {
      console.log('üîÑ Executando redirecionamento para:', redirectUrl);
      
      // M√©todo 1: window.location.replace (imediato)
      try {
        window.location.replace(redirectUrl);
        return { success: true };
      } catch (error) {
        console.warn('M√©todo 1 falhou, tentando m√©todo 2:', error);
      }
      
      // M√©todo 2: window.location.href (com timeout)
      try {
        setTimeout(() => {
          window.location.href = redirectUrl;
        }, 100);
        return { success: true };
      } catch (error) {
        console.warn('M√©todo 2 falhou, tentando m√©todo 3:', error);
      }
      
      // M√©todo 3: Usar history API
      try {
        window.history.pushState(null, '', redirectUrl);
        window.location.reload();
        return { success: true };
      } catch (error) {
        console.warn('M√©todo 3 falhou, tentando m√©todo 4:', error);
      }
      
      // M√©todo 4: √öltimo recurso - recarregar p√°gina
      try {
        window.location.reload();
        return { success: true };
      } catch (error) {
        console.error('Todos os m√©todos de redirecionamento falharam:', error);
        return { success: false, error };
      }
    }
    
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Erro durante logout:', error);
    
    // Mesmo com erro, tentar for√ßar redirecionamento
    if (typeof window !== 'undefined') {
      try {
        window.location.href = '/auth/login?reason=general_error';
      } catch (redirectError) {
        console.error('Erro no redirecionamento de emerg√™ncia:', redirectError);
      }
    }
    
    return { success: false, error };
  }
}

/**
 * Fun√ß√£o para logout com toast de feedback (se dispon√≠vel)
 */
export async function performLogoutWithFeedback(
  showToast?: (type: 'success' | 'error', title: string, message: string) => void,
  reason: string = 'logout'
) {
  try {
    if (showToast) {
      showToast('success', 'Fazendo logout...', 'Encerrando sua sess√£o...');
    }
    
    const result = await performLogout(reason);
    
    if (result.success && showToast) {
      showToast('success', 'Logout realizado', 'Voc√™ foi desconectado com sucesso!');
    }
    
    return result;
  } catch (error) {
    if (showToast) {
      showToast('error', 'Erro no logout', 'Houve um problema ao encerrar sua sess√£o.');
    }
    
    // Mesmo assim, tentar logout for√ßado
    return performLogout(reason);
  }
}

/**
 * Fun√ß√£o de logout de emerg√™ncia - for√ßa redirecionamento imediatamente
 * Use apenas quando outros m√©todos falharem
 */
export function emergencyLogout(reason: string = 'emergency') {
  console.warn('üö® Executando logout de emerg√™ncia...');
  
  try {
    // Limpar localStorage rapidamente
    if (typeof window !== 'undefined') {
      localStorage.clear();
      sessionStorage.clear();
    }
    
    // Limpar cookies b√°sicos
    if (typeof document !== 'undefined') {
      document.cookie.split(";").forEach(function(c) { 
        document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
      });
    }
    
    // For√ßar redirecionamento imediato
    const redirectUrl = `/auth/login?reason=${encodeURIComponent(reason)}`;
    window.location.replace(redirectUrl);
    
  } catch (error) {
    console.error('‚ùå Erro no logout de emerg√™ncia:', error);
    // √öltimo recurso: recarregar p√°gina
    window.location.reload();
  }
}

// Expor fun√ß√£o no window para debug
if (typeof window !== 'undefined') {
  (window as any).emergencyLogout = emergencyLogout;
  console.log('üîß Fun√ß√£o de emerg√™ncia dispon√≠vel: window.emergencyLogout()');
} 